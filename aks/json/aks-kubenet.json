{
  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.6.18.56646",
      "templateHash": "8622162429664935154"
    }
  },
  "parameters": {
    "ADUserID": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Used to set the Keyvault access policy - run this command using az cli to get your ObjectID : az ad signed-in-user show --query objectId -o tsv"
      },
      "maxLength": 36,
      "minLength": 36
    },
    "ResourceGroupName": {
      "type": "string",
      "defaultValue": "aks-KUBENET",
      "minLength": 3,
      "metadata": {
        "description": "Set the resource group name, this will be created automatically"
      }
    },
    "KubenetOrCNINetworkPolicy": {
      "type": "string",
      "defaultValue": "kubenet",
      "allowedValues": [
        "kubenet",
        "CNI"
      ],
      "metadata": {
        "description": "AKS network Plugin - kubenet or CNI"
      }
    },
    "PublicOrPrivateCluster": {
      "type": "string",
      "defaultValue": "public",
      "allowedValues": [
        "private",
        "public"
      ],
      "metadata": {
        "description": "Choose AKS Cluster Type (this is used to define kubectl access mode)"
      }
    },
    "SupportingServersVMSize": {
      "type": "string",
      "defaultValue": "Standard_D2_v3",
      "minLength": 6,
      "metadata": {
        "description": "Set the size for the supporting VMs (domain controller, hub DNS, VPN VM etc) "
      }
    },
    "domainName": {
      "type": "string",
      "defaultValue": "contoso.local",
      "minLength": 3,
      "metadata": {
        "description": "Set the name of the domain eg contoso.local"
      }
    }
  },
  "variables": {
    "$fxv#0": "{\r\n    \"vnets\" : [\r\n    {\r\n      \"vnetName\": \"hubVnet\",\r\n      \"vnetAddressPrefix\": \"172.17.0.0/16\",\r\n        \"subnets\": [\r\n        {\r\n          \"name\": \"main\",\r\n          \"prefix\": \"172.17.1.0/24\",\r\n          \"customNsg\": false\r\n        },\r\n        {\r\n            \"name\": \"AzureBastionSubnet\",\r\n            \"prefix\": \"172.17.2.0/24\",\r\n            \"customNsg\": true\r\n        },\r\n        {\r\n            \"name\": \"GatewaySubnet\",\r\n            \"prefix\": \"172.17.3.0/24\",\r\n            \"customNsg\": true \r\n        }\r\n      ]\r\n    },\r\n    {\r\n        \"vnetName\": \"spoke-virtual-network\",\r\n        \"vnetAddressPrefix\": \"172.16.0.0/16\",\r\n          \"subnets\": [\r\n          {\r\n            \"name\": \"aks-node-subnet\",\r\n            \"prefix\": \"172.16.239.0/24\",\r\n            \"customNsg\": true\r\n          }\r\n        ]\r\n      },   \r\n       {\r\n        \"vnetName\": \"onpremises\",\r\n        \"vnetAddressPrefix\": \"192.168.0.0/16\",\r\n          \"subnets\": [\r\n          {\r\n            \"name\": \"main\",\r\n            \"prefix\": \"192.168.199.0/24\",\r\n            \"customNsg\": true\r\n          },\r\n          {\r\n              \"name\": \"AzureBastionSubnet\",\r\n              \"prefix\": \"192.168.200.0/24\",\r\n              \"customNsg\": true\r\n          }\r\n        ]\r\n      }\r\n ]\r\n}\r\n    ",
    "$fxv#1": "{\r\n    \"vnets\" : [\r\n    {\r\n      \"vnetName\": \"hubVnet\",\r\n      \"vnetAddressPrefix\": \"172.17.0.0/16\",\r\n        \"subnets\": [\r\n        {\r\n          \"name\": \"main\",\r\n          \"prefix\": \"172.17.1.0/24\",\r\n          \"customNsg\": false\r\n        },\r\n        {\r\n            \"name\": \"AzureBastionSubnet\",\r\n            \"prefix\": \"172.17.2.0/24\",\r\n            \"customNsg\": true\r\n        },\r\n        {\r\n            \"name\": \"GatewaySubnet\",\r\n            \"prefix\": \"172.17.3.0/24\",\r\n            \"customNsg\": true\r\n        }\r\n      ]\r\n    },\r\n    {\r\n        \"vnetName\": \"spoke-virtual-network\",\r\n        \"vnetAddressPrefix\": \"172.16.0.0/16\",\r\n          \"subnets\": [\r\n          {\r\n            \"name\": \"aks-node-subnet\",\r\n            \"prefix\": \"172.16.240.0/24\",\r\n            \"customNsg\": true\r\n          }\r\n        ]\r\n      },   \r\n       {\r\n        \"vnetName\": \"onpremises\",\r\n        \"vnetAddressPrefix\": \"192.168.0.0/16\",\r\n          \"subnets\": [\r\n          {\r\n            \"name\": \"main\",\r\n            \"prefix\": \"192.168.199.0/24\",\r\n            \"customNsg\": true\r\n          },\r\n          {\r\n              \"name\": \"AzureBastionSubnet\",\r\n              \"prefix\": \"192.168.200.0/24\",\r\n              \"customNsg\": true\r\n          }\r\n        ]\r\n      }\r\n ]\r\n}\r\n    ",
    "$fxv#2": "{\r\n    \"vnets\" : [\r\n    {\r\n      \"vnetName\": \"hubVnet\",\r\n      \"vnetAddressPrefix\": \"172.17.0.0/16\",\r\n        \"subnets\": [\r\n        {\r\n          \"name\": \"main\",\r\n          \"prefix\": \"172.17.1.0/24\",\r\n          \"customNsg\": false\r\n        },\r\n        {\r\n            \"name\": \"AzureBastionSubnet\",\r\n            \"prefix\": \"172.17.2.0/24\",\r\n            \"customNsg\": true\r\n        },\r\n        {\r\n            \"name\": \"GatewaySubnet\",\r\n            \"prefix\": \"172.17.3.0/24\",\r\n            \"customNsg\": true \r\n        }\r\n      ]\r\n    },\r\n    {\r\n        \"vnetName\": \"spoke-virtual-network\",\r\n        \"vnetAddressPrefix\": \"172.16.0.0/16\",\r\n          \"subnets\": [\r\n          {\r\n            \"name\": \"aks-node-subnet\",\r\n            \"prefix\": \"172.16.238.0/24\",\r\n            \"customNsg\": true\r\n          }\r\n        ]\r\n      },   \r\n       {\r\n        \"vnetName\": \"onpremises\",\r\n        \"vnetAddressPrefix\": \"192.168.0.0/16\",\r\n          \"subnets\": [\r\n          {\r\n            \"name\": \"main\",\r\n            \"prefix\": \"192.168.199.0/24\",\r\n            \"customNsg\": true\r\n          },\r\n          {\r\n              \"name\": \"AzureBastionSubnet\",\r\n              \"prefix\": \"192.168.200.0/24\",\r\n              \"customNsg\": true\r\n          }\r\n        ]\r\n      }\r\n ]\r\n}\r\n    ",
    "env": {
      "kubenet": {
        "vnets": "[json(variables('$fxv#0')).vnets]"
      },
      "CNI": {
        "vnets": "[json(variables('$fxv#1')).vnets]"
      },
      "private": {
        "vnets": "[json(variables('$fxv#2')).vnets]"
      }
    },
    "HostVmSize": "[parameters('SupportingServersVMSize')]",
    "aksPrivatePublic": "[parameters('PublicOrPrivateCluster')]",
    "networkPlugin": "[parameters('KubenetOrCNINetworkPolicy')]",
    "repoOwnerName": "nehalineogi",
    "branchName": "aks",
    "githubPath": "[format('https://raw.githubusercontent.com/{0}/azure-cross-solution-network-architectures/{1}/bicep/aks/scripts/', variables('repoOwnerName'), variables('branchName'))]",
    "VmAdminUsername": "localadmin",
    "location": "[deployment().location]",
    "hubVmName": "hubjump",
    "spokeVmName": "spokejump",
    "onpremVPNVmName": "vpnvm",
    "publicIPAddressNameSuffix": "vpnpip",
    "hubDNSVmName": "hubdnsvm",
    "dcVmName": "dc1",
    "podCidr": "10.244.0.0/16",
    "clusterName": "MyAKSCluster"
  },
  "resources": [
    {
      "type": "Microsoft.Resources/resourceGroups",
      "apiVersion": "2021-04-01",
      "name": "[parameters('ResourceGroupName')]",
      "location": "[variables('location')]"
    },
    {
      "copy": {
        "name": "virtualnetwork",
        "count": "[length(variables('env')[variables('networkPlugin')].vnets)]"
      },
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('{0}', variables('env')[variables('networkPlugin')].vnets[copyIndex()].vnetName)]",
      "resourceGroup": "[parameters('ResourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "vnetName": {
            "value": "[variables('env')[variables('networkPlugin')].vnets[copyIndex()].vnetName]"
          },
          "vnetAddressPrefix": {
            "value": "[variables('env')[variables('networkPlugin')].vnets[copyIndex()].vnetAddressPrefix]"
          },
          "location": {
            "value": "[variables('location')]"
          },
          "subnets": {
            "value": "[variables('env')[variables('networkPlugin')].vnets[copyIndex()].subnets]"
          },
          "nsgDefaultId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('ResourceGroupName')), 'Microsoft.Resources/deployments', 'default-nsg')).outputs.nsgId.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.6.18.56646",
              "templateHash": "5753543045224616099"
            }
          },
          "parameters": {
            "subnets": {
              "type": "array"
            },
            "vnetName": {
              "type": "string"
            },
            "vnetAddressPrefix": {
              "type": "string"
            },
            "location": {
              "type": "string"
            },
            "nsgDefaultId": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Network/virtualNetworks",
              "apiVersion": "2021-02-01",
              "name": "[parameters('vnetName')]",
              "location": "[parameters('location')]",
              "properties": {
                "copy": [
                  {
                    "name": "subnets",
                    "count": "[length(parameters('subnets'))]",
                    "input": {
                      "name": "[parameters('subnets')[copyIndex('subnets')].name]",
                      "properties": {
                        "privateEndpointNetworkPolicies": "Disabled",
                        "addressPrefix": "[parameters('subnets')[copyIndex('subnets')].prefix]",
                        "networkSecurityGroup": "[if(parameters('subnets')[copyIndex('subnets')].customNsg, null(), createObject('id', parameters('nsgDefaultId'), 'location', parameters('location'), 'properties', createObject()))]"
                      }
                    }
                  }
                ],
                "addressSpace": {
                  "addressPrefixes": [
                    "[parameters('vnetAddressPrefix')]"
                  ]
                }
              }
            }
          ],
          "outputs": {
            "vnid": {
              "type": "string",
              "value": "[resourceId('Microsoft.Network/virtualNetworks', parameters('vnetName'))]"
            },
            "vnName": {
              "type": "string",
              "value": "[parameters('vnetName')]"
            },
            "subnets": {
              "type": "array",
              "value": "[reference(resourceId('Microsoft.Network/virtualNetworks', parameters('vnetName'))).subnets]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('ResourceGroupName')), 'Microsoft.Resources/deployments', 'default-nsg')]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('ResourceGroupName'))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "default-nsg",
      "resourceGroup": "[parameters('ResourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[variables('location')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.6.18.56646",
              "templateHash": "2215729185500223360"
            }
          },
          "parameters": {
            "location": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Network/networkSecurityGroups",
              "apiVersion": "2020-06-01",
              "name": "default-nsg",
              "location": "[parameters('location')]",
              "properties": {}
            }
          ],
          "outputs": {
            "nsgId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Network/networkSecurityGroups', 'default-nsg')]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('ResourceGroupName'))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "kv",
      "resourceGroup": "[parameters('ResourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[variables('location')]"
          },
          "adUserId": {
            "value": "[parameters('ADUserID')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.6.18.56646",
              "templateHash": "6604354719076478904"
            }
          },
          "parameters": {
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "tenantId": {
              "type": "string",
              "defaultValue": "[subscription().tenantId]"
            },
            "keyvaultname": {
              "type": "string",
              "defaultValue": "[format('{0}-{1}', substring(resourceGroup().name, 0, 3), uniqueString(resourceGroup().id))]"
            },
            "adUserId": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.KeyVault/vaults",
              "apiVersion": "2019-09-01",
              "name": "[parameters('keyvaultname')]",
              "location": "[parameters('location')]",
              "properties": {
                "enabledForDeployment": false,
                "enabledForTemplateDeployment": true,
                "enabledForDiskEncryption": false,
                "enableSoftDelete": false,
                "accessPolicies": [
                  {
                    "objectId": "[parameters('adUserId')]",
                    "tenantId": "[parameters('tenantId')]",
                    "permissions": {
                      "keys": [
                        "get",
                        "list",
                        "update",
                        "create",
                        "import",
                        "delete",
                        "recover",
                        "backup",
                        "restore"
                      ],
                      "secrets": [
                        "get",
                        "list",
                        "set",
                        "delete",
                        "recover",
                        "backup",
                        "restore"
                      ],
                      "certificates": [
                        "get",
                        "list",
                        "update",
                        "create",
                        "import",
                        "delete",
                        "recover",
                        "backup",
                        "restore",
                        "managecontacts",
                        "manageissuers",
                        "getissuers",
                        "listissuers",
                        "setissuers",
                        "deleteissuers"
                      ]
                    }
                  }
                ],
                "tenantId": "[parameters('tenantId')]",
                "sku": {
                  "name": "standard",
                  "family": "A"
                }
              }
            }
          ],
          "outputs": {
            "keyvaultid": {
              "type": "string",
              "value": "[resourceId('Microsoft.KeyVault/vaults', parameters('keyvaultname'))]"
            },
            "keyvaultname": {
              "type": "string",
              "value": "[parameters('keyvaultname')]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('ResourceGroupName'))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "OnpremDC",
      "resourceGroup": "[parameters('ResourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[variables('location')]"
          },
          "windowsVM": {
            "value": true
          },
          "deployDC": {
            "value": true
          },
          "domainName": {
            "value": "[parameters('domainName')]"
          },
          "adminusername": {
            "value": "[variables('VmAdminUsername')]"
          },
          "keyvault_name": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('ResourceGroupName')), 'Microsoft.Resources/deployments', 'kv')).outputs.keyvaultname.value]"
          },
          "vmname": {
            "value": "[variables('dcVmName')]"
          },
          "subnet1ref": {
            "value": "[format('{0}/subnets/{1}', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('ResourceGroupName')), 'Microsoft.Resources/deployments', format('{0}', variables('env')[variables('networkPlugin')].vnets[2].vnetName))).outputs.vnid.value, reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('ResourceGroupName')), 'Microsoft.Resources/deployments', format('{0}', variables('env')[variables('networkPlugin')].vnets[2].vnetName))).outputs.subnets.value[0].name)]"
          },
          "vmSize": {
            "value": "[variables('HostVmSize')]"
          },
          "githubPath": {
            "value": "[variables('githubPath')]"
          },
          "adUserId": {
            "value": "[parameters('ADUserID')]"
          },
          "pDNSZone": {
            "value": "placeholder.placeholder.placeholder"
          },
          "HubDNSIP": {
            "value": "10.10.10.10"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.6.18.56646",
              "templateHash": "6125059829993949609"
            }
          },
          "parameters": {
            "adminusername": {
              "type": "string"
            },
            "keyvault_name": {
              "type": "string"
            },
            "vmname": {
              "type": "string"
            },
            "subnet1ref": {
              "type": "string"
            },
            "githubPath": {
              "type": "string"
            },
            "adUserId": {
              "type": "string"
            },
            "adminPassword": {
              "type": "secureString",
              "defaultValue": "[format('{0}aA1!{1}', uniqueString(resourceGroup().id, parameters('vmname')), uniqueString(parameters('adUserId')))]"
            },
            "windowsVM": {
              "type": "bool"
            },
            "domainName": {
              "type": "string",
              "defaultValue": "contoso.local"
            },
            "pDNSZone": {
              "type": "string",
              "defaultValue": ""
            },
            "HubDNSIP": {
              "type": "string",
              "defaultValue": ""
            },
            "vpnVars": {
              "type": "object",
              "defaultValue": {
                "psk": null,
                "gwip": null,
                "gwaddressPrefix": null,
                "onpremAddressPrefix": null,
                "spokeAddressPrefix": null,
                "hubAddressPrefix": null
              }
            },
            "vmSize": {
              "type": "string",
              "metadata": {
                "description": "Size of the virtual machine."
              }
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "location for all resources"
              }
            },
            "publicIPAddressNameSuffix": {
              "type": "string",
              "defaultValue": "pip"
            },
            "deployPIP": {
              "type": "bool",
              "defaultValue": false
            },
            "deployVpn": {
              "type": "bool",
              "defaultValue": false
            },
            "deployDC": {
              "type": "bool",
              "defaultValue": false
            },
            "deployHubDns": {
              "type": "bool",
              "defaultValue": false
            }
          },
          "variables": {
            "dcdisk": [
              {
                "diskSizeGB": 20,
                "lun": 0,
                "createOption": "Empty"
              }
            ],
            "storageAccountName": "[uniqueString(resourceGroup().id, parameters('vmname'))]",
            "nicName": "[format('{0}nic', parameters('vmname'))]",
            "dnsLabelPrefix": "[format('dns-{0}-{1}', uniqueString(resourceGroup().id, parameters('vmname')), parameters('publicIPAddressNameSuffix'))]"
          },
          "resources": [
            {
              "condition": "[parameters('deployPIP')]",
              "type": "Microsoft.Network/publicIPAddresses",
              "apiVersion": "2020-06-01",
              "name": "[format('{0}-{1}', variables('nicName'), parameters('publicIPAddressNameSuffix'))]",
              "location": "[parameters('location')]",
              "properties": {
                "publicIPAllocationMethod": "Static",
                "dnsSettings": {
                  "domainNameLabel": "[variables('dnsLabelPrefix')]"
                }
              }
            },
            {
              "type": "Microsoft.Storage/storageAccounts",
              "apiVersion": "2019-06-01",
              "name": "[variables('storageAccountName')]",
              "location": "[parameters('location')]",
              "sku": {
                "name": "Standard_LRS"
              },
              "kind": "Storage"
            },
            {
              "condition": "[parameters('deployPIP')]",
              "type": "Microsoft.Network/networkInterfaces",
              "apiVersion": "2020-06-01",
              "name": "[format('{0}pip', variables('nicName'))]",
              "location": "[parameters('location')]",
              "properties": {
                "enableIPForwarding": "[if(parameters('deployVpn'), true(), false())]",
                "ipConfigurations": [
                  {
                    "name": "ipconfig1",
                    "properties": {
                      "privateIPAllocationMethod": "Dynamic",
                      "publicIPAddress": {
                        "id": "[resourceId('Microsoft.Network/publicIPAddresses', format('{0}-{1}', variables('nicName'), parameters('publicIPAddressNameSuffix')))]"
                      },
                      "subnet": {
                        "id": "[parameters('subnet1ref')]"
                      }
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/publicIPAddresses', format('{0}-{1}', variables('nicName'), parameters('publicIPAddressNameSuffix')))]"
              ]
            },
            {
              "condition": "[not(parameters('deployPIP'))]",
              "type": "Microsoft.Network/networkInterfaces",
              "apiVersion": "2020-06-01",
              "name": "[variables('nicName')]",
              "location": "[parameters('location')]",
              "properties": {
                "enableIPForwarding": "[if(parameters('deployVpn'), true(), false())]",
                "ipConfigurations": [
                  {
                    "name": "ipconfig1",
                    "properties": {
                      "privateIPAllocationMethod": "Dynamic",
                      "subnet": {
                        "id": "[parameters('subnet1ref')]"
                      }
                    }
                  }
                ]
              }
            },
            {
              "type": "Microsoft.Compute/virtualMachines",
              "apiVersion": "2020-06-01",
              "name": "[parameters('vmname')]",
              "location": "[parameters('location')]",
              "properties": {
                "hardwareProfile": {
                  "vmSize": "[parameters('vmSize')]"
                },
                "osProfile": {
                  "computerName": "[parameters('vmname')]",
                  "adminUsername": "[parameters('adminusername')]",
                  "adminPassword": "[parameters('adminPassword')]"
                },
                "storageProfile": {
                  "imageReference": {
                    "publisher": "[if(parameters('windowsVM'), 'MicrosoftWindowsServer', 'canonical')]",
                    "offer": "[if(parameters('windowsVM'), 'WindowsServer', '0001-com-ubuntu-server-focal')]",
                    "sku": "[if(parameters('windowsVM'), '2019-Datacenter', '20_04-lts')]",
                    "version": "[if(parameters('windowsVM'), 'latest', 'latest')]"
                  },
                  "osDisk": {
                    "createOption": "FromImage"
                  },
                  "dataDisks": "[if(parameters('deployDC'), variables('dcdisk'), null())]"
                },
                "networkProfile": {
                  "networkInterfaces": [
                    {
                      "id": "[if(parameters('deployPIP'), resourceId('Microsoft.Network/networkInterfaces', format('{0}pip', variables('nicName'))), resourceId('Microsoft.Network/networkInterfaces', variables('nicName')))]"
                    }
                  ]
                },
                "diagnosticsProfile": {
                  "bootDiagnostics": {
                    "enabled": true,
                    "storageUri": "[reference(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))).primaryEndpoints.blob]"
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/networkInterfaces', format('{0}pip', variables('nicName')))]",
                "[resourceId('Microsoft.Network/networkInterfaces', variables('nicName'))]",
                "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
              ]
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2019-09-01",
              "name": "[format('{0}/{1}-admin-password', parameters('keyvault_name'), parameters('vmname'))]",
              "properties": {
                "contentType": "securestring",
                "value": "[parameters('adminPassword')]",
                "attributes": {
                  "enabled": true
                }
              }
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2019-09-01",
              "name": "[format('{0}/{1}-admin-username', parameters('keyvault_name'), parameters('vmname'))]",
              "properties": {
                "contentType": "string",
                "value": "[parameters('adminusername')]",
                "attributes": {
                  "enabled": true
                }
              }
            },
            {
              "condition": "[parameters('deployVpn')]",
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2021-03-01",
              "name": "[format('{0}/cse', parameters('vmname'))]",
              "location": "[parameters('location')]",
              "properties": {
                "publisher": "Microsoft.Azure.Extensions",
                "type": "CustomScript",
                "typeHandlerVersion": "2.1",
                "autoUpgradeMinorVersion": false,
                "settings": {},
                "protectedSettings": {
                  "fileUris": [
                    "[format('{0}cse.sh', parameters('githubPath'))]"
                  ],
                  "commandToExecute": "[if(parameters('deployVpn'), format('sh cse.sh {0} {1} {2} {3} {4} {5} {6}', reference(resourceId('Microsoft.Network/networkInterfaces', format('{0}pip', variables('nicName'))), '2020-06-01').ipConfigurations[0].properties.privateIPAddress, reference(resourceId('Microsoft.Network/publicIPAddresses', format('{0}-{1}', variables('nicName'), parameters('publicIPAddressNameSuffix'))), '2020-06-01').ipAddress, parameters('vpnVars').gwip, parameters('vpnVars').gwaddressPrefix, parameters('vpnVars').psk, parameters('vpnVars').onpremAddressPrefix, parameters('vpnVars').spokeAddressPrefix), '')]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/networkInterfaces', format('{0}pip', variables('nicName')))]",
                "[resourceId('Microsoft.Network/publicIPAddresses', format('{0}-{1}', variables('nicName'), parameters('publicIPAddressNameSuffix')))]",
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('vmname'))]"
              ]
            },
            {
              "condition": "[parameters('deployHubDns')]",
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2021-03-01",
              "name": "[format('{0}/csehubdns', parameters('vmname'))]",
              "location": "[parameters('location')]",
              "properties": {
                "publisher": "Microsoft.Azure.Extensions",
                "type": "CustomScript",
                "typeHandlerVersion": "2.1",
                "autoUpgradeMinorVersion": false,
                "settings": {},
                "protectedSettings": {
                  "fileUris": [
                    "[format('{0}hubdns.sh', parameters('githubPath'))]"
                  ],
                  "commandToExecute": "[if(parameters('deployHubDns'), format('sh hubdns.sh {0} {1} {2}', parameters('vpnVars').onpremAddressPrefix, parameters('vpnVars').spokeAddressPrefix, parameters('vpnVars').hubAddressPrefix), '')]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('vmname'))]"
              ]
            },
            {
              "condition": "[parameters('deployDC')]",
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2021-03-01",
              "name": "[format('{0}/{1}', parameters('vmname'), 'CreateADForest')]",
              "location": "[parameters('location')]",
              "properties": {
                "publisher": "Microsoft.Powershell",
                "type": "DSC",
                "typeHandlerVersion": "2.83",
                "autoUpgradeMinorVersion": true,
                "settings": {
                  "ModulesUrl": "[uri(parameters('githubPath'), 'CreateADPDC.zip')]",
                  "ConfigurationFunction": "CreateADPDC.ps1\\CreateADPDC",
                  "Properties": {
                    "pDNSZone": "[parameters('pDNSZone')]",
                    "HubDNSIP": "[parameters('HubDNSIP')]",
                    "DomainName": "[parameters('domainName')]",
                    "AdminCreds": {
                      "UserName": "[parameters('adminusername')]",
                      "Password": "PrivateSettingsRef:adminPassword"
                    }
                  }
                },
                "protectedSettings": {
                  "Items": {
                    "AdminPassword": "[parameters('adminPassword')]"
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('vmname'))]"
              ]
            }
          ],
          "outputs": {
            "VmPip": {
              "type": "string",
              "value": "[if(parameters('deployPIP'), reference(resourceId('Microsoft.Network/publicIPAddresses', format('{0}-{1}', variables('nicName'), parameters('publicIPAddressNameSuffix'))), '2020-06-01').dnsSettings.fqdn, '')]"
            },
            "VmIp": {
              "type": "string",
              "value": "[if(parameters('deployPIP'), reference(resourceId('Microsoft.Network/publicIPAddresses', format('{0}-{1}', variables('nicName'), parameters('publicIPAddressNameSuffix'))), '2020-06-01').ipAddress, '')]"
            },
            "VmPrivIp": {
              "type": "string",
              "value": "[if(parameters('deployPIP'), reference(resourceId('Microsoft.Network/networkInterfaces', format('{0}pip', variables('nicName'))), '2020-06-01').ipConfigurations[0].properties.privateIPAddress, reference(resourceId('Microsoft.Network/networkInterfaces', variables('nicName')), '2020-06-01').ipConfigurations[0].properties.privateIPAddress)]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('ResourceGroupName')), 'Microsoft.Resources/deployments', 'kv')]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('ResourceGroupName'))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('ResourceGroupName')), 'Microsoft.Resources/deployments', format('{0}', variables('env')[variables('networkPlugin')].vnets[2].vnetName))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('ResourceGroupName')), 'Microsoft.Resources/deployments', format('{0}', variables('env')[variables('networkPlugin')].vnets[2].vnetName))]"
      ]
    }
  ]
}